  - name: Check if nvidia isntalled
    shell: nvidia-smi
    register: nvidia_installed
    ignore_errors: true

  - name: "configure repository"
    shell: |
      curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --yes --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg && curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list && sudo apt-get update
    when: nvidia_installed.rc != 0

  - name: "Install container toolkit packages"
    apt:
      name: nvidia-container-toolkit
      state: present
      update_cache: yes
    when: nvidia_installed.rc != 0

  - name: Install build-essential package
    apt:
      name: build-essential
      state: present
      update_cache: yes
    when: nvidia_installed.rc != 0

  - name: Install libmodule-install-perl package
    apt:
      name: libmodule-install-perl
      state: present
      update_cache: yes
    when: nvidia_installed.rc != 0

  - name: Download Nvidia driver
    get_url:
      url: "https://us.download.nvidia.com/tesla/460.106.00/NVIDIA-Linux-x86_64-460.106.00.run"
      dest: "/tmp/NVIDIA-Linux-x86_64-460.106.00.run"
    when: nvidia_installed.rc != 0

  - name: Check if the file exists
    stat:
      path: /etc/apt/sources.list.d/nvidia-container-toolkit.list
    register: file_stat
    when: nvidia_installed.rc != 0
  
  - name: Setup Nvidia repository for libnvidia-container
    become: yes
    shell: |
      distribution=$(. /etc/os-release; echo $ID$VERSION_ID) && \
      curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg && \
      curl -s -L "https://nvidia.github.io/libnvidia-container/$distribution/libnvidia-container.list" | \
      sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
      sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
    when:
      - nvidia_installed.rc != 0
      - file_stat.stat is defined
      - file_stat.stat.exists == False

  - name: Update apt package cache
    apt:
      update_cache: yes
    when: nvidia_installed.rc != 0
 
  - name: Download CUDA pin file
    get_url:
      url: "https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin"
      dest: "/tmp/cuda-ubuntu2004.pin"
    when: nvidia_installed.rc != 0

  - name: Make NVIDIA-Linux-x86_64-460.106.00.run executable
    command: chmod +x /tmp/NVIDIA-Linux-x86_64-460.106.00.run
    when: nvidia_installed.rc != 0

  - name: Modify blacklist-nouveau.conf
    lineinfile:
      path: /etc/modprobe.d/blacklist-nouveau.conf
      line: "blacklist nouveau"
      create: yes
    when: nvidia_installed.rc != 0

  - name: Update initramfs
    command: update-initramfs -u
    when: nvidia_installed.rc != 0

  - name: Reboot the nodes
    command: reboot
    async: 0
    poll: 0
    become: true
    ignore_errors: true
    when: nvidia_installed.rc != 0

  - name: Wait for the hosts to reboot
    wait_for_connection:
      delay: 30
      timeout: 300
    when: nvidia_installed.rc != 0

  - name: Update apt package cache and install nvidia-container-toolkit-base
    apt:
      update_cache: yes
      name: nvidia-container-toolkit-base
      state: present
    when: nvidia_installed.rc != 0

  - name: Check nvidia-ctk version
    command: nvidia-ctk --version
    when: nvidia_installed.rc != 0

  - name: Update apt package cache
    apt:
      update_cache: yes
    when: nvidia_installed.rc != 0

  - name: Install nvidia-container-toolkit
    apt:
      name: nvidia-container-toolkit
      state: present
      update_cache: yes
    when: nvidia_installed.rc != 0

  - name: Configure nvidia-ctk runtime for Docker
    command: nvidia-ctk runtime configure --runtime=docker
    when: nvidia_installed.rc != 0

  - name: Restart docker
    shell: sudo systemctl restart docker
    when: nvidia_installed.rc != 0

  - name: Download cuda-ubuntu2004.pin
    get_url:
      url: "https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin"
      dest: "/etc/apt/preferences.d/cuda-repository-pin-600"
    when: nvidia_installed.rc != 0

  - name: Download cuda-repo package
    get_url:
      url: "https://developer.download.nvidia.com/compute/cuda/12.1.1/local_installers/cuda-repo-ubuntu2004-12-1-local_12.1.1-530.30.02-1_amd64.deb"
      dest: "/tmp/cuda-repo-ubuntu2004-12-1-local_12.1.1-530.30.02-1_amd64.deb"
    when: nvidia_installed.rc != 0

  - name: Install cuda-repo package
    shell: sudo dpkg -i /tmp/cuda-repo-ubuntu2004-12-1-local_12.1.1-530.30.02-1_amd64.deb
    when: nvidia_installed.rc != 0

  - name: Copy CUDA keyring to system keyrings
    command: sudo cp /var/cuda-repo-ubuntu2004-12-1-local/cuda-C5C0804F-keyring.gpg /usr/share/keyrings/
    when: nvidia_installed.rc != 0

  - name: Update apt package cache
    apt:
      update_cache: yes
    when: nvidia_installed.rc != 0

  - name: Install CUDA toolkit
    apt:
      name: cuda
      state: present
      update_cache: yes
    when: nvidia_installed.rc != 0

  - name: Restart nomad
    shell: sudo systmctl restart noamd
    when: nvidia_installed.rc != 0

