- name: "Define nomad server policy"
  template:
    src: templates/nomad_server_policy.j2
    dest: "{{ consul_policies_dir }}/nomad-server-policy.hcl"
    owner: ubuntu

- name: "Define nomad client policy"
  template:
    src: templates/nomad_client_policy.j2
    dest: "{{ consul_policies_dir }}/nomad-client-policy.hcl"
    owner: ubuntu

- name: "Check if nomad server policy exists"
  shell: consul acl policy list | grep "nomad-server" | cat
  register: server_pol

- name: "Create nomad server policy"
  shell: consul acl policy create -name nomad-server -description "Nomad Server Policy" -rules @{{ consul_policies }}nomad-server-policy.hcl
  when: server_pol.stdout == ''

- name: "Check if nomad client policy exists"
  shell: consul acl policy list | grep "nomad-client" | cat
  register: client_pol

- name: "Create nomad client policy"
  shell: consul acl policy create -name nomad-client -description "Nomad Client Policy" -rules @{{ consul_policies }}nomad-client-policy.hcl
  when: client_pol.stdout == ''

- name: "Get consul  token list"
  shell: consul acl token list > consul_acl_token_list
  
- name: "Generate token for each nomad server"
  shell: if [ $(cat consul_acl_token_list | grep -c "{{item}} (Datacenter:") -lt 2 ]; then consul acl token create -policy-name nomad-server -description "Nomad Server Agent Token"  -node-identity "{{ item }}:{{ consul_dc_name }}"  > {{ item}}_nomad_token; fi
  loop: "{{ groups['nomad_servers'] }}"

- name: "Generate token for each nomad client"
  shell: if [ $(cat consul_acl_token_list | grep -c "{{ item }} (Datacenter:") -lt 2 ]; then consul acl token create -policy-name nomad-client -description "Nomad Client Agent Token"  -node-identity "{{ item }}:{{ consul_dc_name }}"  > {{ item}}_nomad_token; fi
  loop: "{{ groups['nomad_clients'] }}"

- name: "Fetch nomad agent token from consul-master to ansible-master"
  fetch:
    src: "{{ path }}{{ item }}_nomad_token"
    dest: "{{ nomad_fetched }}"
    flat: yes
  loop: "{{ groups['nomad'] }}"

