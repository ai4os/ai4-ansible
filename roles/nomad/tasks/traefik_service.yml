# Configure Traefik service for from-scratch deployment functionality

- set_fact:
    certs_dir: "{{ consul_fetched }}"

- set_fact:
    certs_dir: "{{ path }}{{ new_certs }}/"
  when: ("traefik_new_master" in groups and inventory_hostname in groups["traefik_new_master"])

# Copy Nomad's Traefik token from ansible-master's {{certs_dir}} dir to the Traefik node's dir.
- name: "Copy traefik token from ansible_master to traefik_master"
  copy:
   src: "{{ certs_dir }}traefik_token"
   dest: "{{ consul_certs }}"

# Unzip Traefik SSL certs from {{traefik_certs}}.zip to {{traefik_certs}} dir in ansible-master
- name: "Create traefik SSL certs directory in ansible_master if it does not exist"
  ansible.builtin.file:
    path: "{{ path }}{{ traefik_certs }}"
    state: directory
    mode: '0755'
  delegate_to: 127.0.0.1

- stat:
    path: "{{ path }}{{ traefik_certs }}.zip"
  register: zip_file

- debug:
    msg: "WARNING: Traefik SSL zip file does not exist. It will be ignored."
  when: not zip_file.stat.exists

- name: "Unzip file in ansible_master if it is zipped"
  ansible.builtin.unarchive:
    src: "{{ path }}{{ traefik_certs }}.zip"
    dest: "{{ path }}"
    creates: "{{ path }}{{ traefik_certs }}/domain.pem"
  delegate_to: 127.0.0.1
  when: zip_file.stat.exists

# Copy Traefik SSL certs from {{traefik_certs}} dir in ansible-master to the Traefik node's dir.
- name: "Create traefik SSL certs directory in traefik_master if it does not exist"
  ansible.builtin.file:
    path: "{{ traefik_certs_dir }}"
    state: directory
    mode: '0755'

- stat:
    path: "{{ path }}{{ traefik_certs }}/domain.key"
  register: key_file

- debug:
    msg: "WARNING: Traefik SSL certs does not exist. They will be ignored."
  when: not key_file.stat.exists

- name: "Copy traefik SSL certificates from ansible_master to trafik_master"
  copy:
   src: "{{ path }}{{ traefik_certs }}/{{ item }}"
   dest: "{{ traefik_certs_dir }}"
  with_items:
    - domain.key
    - domain.pem
  when: key_file.stat.exists

#Set Traefik hostname
- name: Set Traefik name
  set_fact:
    consul_hostname: "{{ consul_dc_name }}-traefik"
  when: ("traefik_master" in groups and inventory_hostname in groups['traefik_master'])

- name:  Set new Traefik name
  set_fact:
    consul_hostname: "{{ consul_dc_name }}-traefik"
  when: ("traefik_new_master" in groups and inventory_hostname in groups['traefik_new_master'])

# Set Traefik token in the service job
- name: Get traefik Token
  set_fact:
    token_consul_token: "{{ lookup('file', certs_dir + 'traefik_token')| regex_search(regexp,'\\1') | first }}"
  vars:
    regexp: 'SecretID:\s+(.*)'

# Define Traefik service job
- name: "Define job config for traefik service"
  template:
    src: templates/traefik.j2
    dest: "{{ path }}traefik-{{ nomad_dc }}.hcl"
    owner: "{{ username }}"
    force: no
  register: create_traefik_job

#Check if traefik container is running
- name: Run garbage collector
  command: nomad system gc
  register: nomad_output
  changed_when: false

- name: Get list of running jobs
  command: nomad job status
  register: nomad_output
  changed_when: false
- name: Check if a Traefik job is running
  set_fact:
    traefik_running: "{{ 'traefik-' ~ consul_dc_name in nomad_output.stdout }}"
  changed_when: false

- name: Check if a Traefik container is running debug
  debug:
    msg: "Is Traefik container running? {{ traefik_running }}"

# Run the Traefik service job
- name: "Run service job"
  command: nomad job run traefik-{{ nomad_dc }}.hcl
  args:
    chdir: "{{ path }}"
  when: create_traefik_job.changed or not traefik_running
  async: 60
  poll: 5
